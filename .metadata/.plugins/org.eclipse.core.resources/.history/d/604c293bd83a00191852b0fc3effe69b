
public class PerformanceList {
	private PerformanceNode head;
	private PerformanceNode tail;
	private PerformanceNode cursor;
	int position = 0;
	public PerformanceList() {
		this.head = null;
		this.tail = null;
		this.cursor = null;
	}
	public void addToEnd(PerformanceNode newPerformance) {
		if(this.head == null||cursor==null){
			this.head = newPerformance;
			this.tail = newPerformance;
			this.cursor = newPerformance;
			newPerformance.setSerialNo(newPerformance.getSerialNo()+1);
		}
		else{
			while(cursor.getNextLink()!=null) {
				cursor = cursor.getNextLink();
			}
			newPerformance.setPrevLink(cursor);
			cursor.setNextLink(newPerformance);
			cursor = newPerformance;
			tail = newPerformance;
			newPerformance.setStartTime(newPerformance.getPrevLink().getStartTime(),newPerformance.getPrevLink().getDuration());
			newPerformance.setSerialNo(newPerformance.getPrevLink().getSerialNo()+1);
		}
		position++;
	}
	public void addAfterCurrent(PerformanceNode newPerformance) {
		if(cursor==null) {
			head = newPerformance;
			tail = newPerformance;
			cursor = newPerformance;
			newPerformance.setSerialNo(newPerformance.getSerialNo()+1);
		}
		else if(cursor.getNextLink()==null) {
			newPerformance.setPrevLink(cursor);
			cursor.setNextLink(newPerformance);
			cursor = newPerformance;
			tail= newPerformance;
			newPerformance.setStartTime(newPerformance.getPrevLink().getStartTime(),newPerformance.getPrevLink().getDuration());
			newPerformance.setSerialNo(newPerformance.getPrevLink().getSerialNo()+1);
		}
		else {
			newPerformance.setNextLink(cursor.getNextLink());
			newPerformance.setPrevLink(cursor);
			cursor.setNextLink(newPerformance);
			newPerformance.getNextLink().setPrevLink(newPerformance);
			cursor = newPerformance;
			int tempDuration=cursor.getDuration();
			int tempStartTime = cursor.getStartTime();
			while(newPerformance!=null) {
				newPerformance.setStartTime(newPerformance.getPrevLink().getStartTime()+tempStartTime,newPerformance.getPrevLink().getDuration()+tempDuration);
				newPerformance.setSerialNo(newPerformance.getPrevLink().getSerialNo()+1);
				newPerformance = newPerformance.getNextLink();
			}	
		}
		position++;
	}
	public boolean removeCurrentNode() {
		if(cursor!=null ) {
			PerformanceNode tempNode = cursor;
			if(cursor.getNextLink()==null && cursor.getPrevLink()==null) {
				cursor= null;
				head= null;
				tail = null;
			}
			else if(cursor.getNextLink()==null) {
				cursor=cursor.getPrevLink();
				tail = cursor;
			}
			else {
				cursor.getPrevLink().setNextLink(cursor.getNextLink());
				cursor.getNextLink().setPrevLink(cursor.getPrevLink());
				
				int tempDuration=cursor.getDuration();
				int tempStartTime = cursor.getStartTime();
				cursor = cursor.getNextLink();
				PerformanceNode tempNode1 = cursor;
				while(tempNode1!=null){
					tempNode1.setStartTime(tempNode1.getPrevLink().getStartTime()-tempStartTime,tempNode1.getPrevLink().getDuration()-tempDuration);
					tempNode1.setSerialNo(tempNode1.getPrevLink().getSerialNo()-1);
					tempNode1 = tempNode1.getNextLink();
				}	
			}
			position--;
			System.out.println("performance "+tempNode.getPerformance()+" has been removed.");
			return true;
		}
		return false;
	}
	public PerformanceNode getCursor() {
		return cursor;
	}
	public int getPosition() {
		return this.position;
	}
	public PerformanceNode getTail() {
		return this.tail;
	}
	public void displayCurrentPerformance()	{
		System.out.println(cursor);
	}
	public boolean moveCursorForward() throws NoCurrentNodeException {
		if(cursor == null) {
			throw new NoCurrentNodeException("There is no performance in the schedule.");
		}
		if (cursor.getNextLink()!=null) {
			cursor = cursor.getNextLink();
			return true;
		}
		else { 
			return false;
		}	
		
	}
	public boolean moveCursorBackward() throws NoCurrentNodeException{
		if(cursor == null) {
			throw new NoCurrentNodeException("There is no performance in the schedule.");
		}
		if (cursor.getPrevLink()!=null) {
			cursor = cursor.getPrevLink();
			return true;
		}
		else return false;
		
	}
	public boolean jumpToPosition(int position) {
		if(!(position>this.position||position<0)) {
			cursor = head;
			for(int i=0;i<this.position-1;i++) {
			cursor=cursor.getNextLink();
			}
			return true;
		}
		return false;
	}
	public String toString(){
		PerformanceNode newNode = head;
		String str ="";
		
		for(int i=0;i<this.position;i++) {
			if(newNode==cursor) {
				str+=String.format("%7s%5d","*",newNode.getSerialNo());
			}
			else {
				str+=String.format("%7s%5d","",newNode.getSerialNo());
			}
			str +=newNode.toString();
			newNode=newNode.getNextLink();
		}
		return str;
	}
}
