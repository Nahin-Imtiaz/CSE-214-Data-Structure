import java.util.Stack;

public class CardStack {
	char ch;
	
	Stack<Card> stack ;
	public CardStack() {
		stack = new Stack<Card>();
	}
	public CardStack(char ch) {
		stack = new Stack<Card>();
		this.ch=ch;
	}
	public void push(Card newCard) {
		stack.push(newCard);
	}
	public Card pop() {
		return stack.pop();
		
	}
	public Card peek() {
		return stack.peek();
	}
	public boolean isEmpty() {
		return stack.isEmpty();
	}
	public int size() {
		return stack.size();
	}
	public void printStack(char type) {
		if(type=='s') {
			if(stack.isEmpty()) {
				System.out.print("[  ]");
			}
			else {
				stack.peek().setFaceUp(false);
				System.out.print("["+stack.peek()+"]");
			}	
		}
		else if (type=='w') {
			stack.peek().setFaceUp(true);
			System.out.print("W1 ["+stack.peek()+"]");
		}
		else if (type=='f') {
			stack.peek().setFaceUp(true);
			System.out.print("["+stack.peek()+"]");
		}
		else if (type=='t') {
			if(stack.isEmpty()) {
				System.out.println("[  ]");
			}
			else {
				Card tempCard= new Card();
				stack.peek().setFaceUp(true);
			
				Stack<Card> tempStack = new Stack<Card>();
			
				while(stack.size()>0) {
					tempStack.push(stack.pop());
				}
				while(tempStack.size()>0) {
					stack.push(tempStack.peek());
					System.out.print("["+tempStack.pop()+"]");
				}
				System.out.println("");
			}	
		}
	}
}
